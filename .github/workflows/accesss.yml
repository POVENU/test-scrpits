name: Export Org Repo Access Details

on:
  workflow_dispatch:  # Allows manual triggering

jobs:
  export-repo-access:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install required Python libraries
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas openpyxl

      - name: Fetch Repos and Access Details
        env:
          GH_TOKEN: ${{ secrets.VENU_TOKEN }}   # GitHub personal access token
          GH_ORG: ${{ secrets.GH_ORG }}       # Organization name
        run: |
          # Python script to fetch repo details and export them to CSV
          echo "
import csv
import requests
import os
import pandas as pd

# Set GitHub token and org name from environment
token = os.getenv('GH_TOKEN')
org = os.getenv('GH_ORG')

headers = {
    'Authorization': f'token {token}',
    'Accept': 'application/vnd.github.v3+json'
}

# Fetch all repos in the organization
repos_url = f'https://api.github.com/orgs/{org}/repos?per_page=100'
repos = []
while repos_url:
    response = requests.get(repos_url, headers=headers)
    repos.extend(response.json())
    repos_url = response.links.get('next', {}).get('url')

# Prepare data for CSV
data = []
for repo in repos:
    repo_name = repo['name']
    collaborators_url = f'https://api.github.com/repos/{org}/{repo_name}/collaborators?per_page=100'
    collaborators = requests.get(collaborators_url, headers=headers).json()
    
    for collaborator in collaborators:
        username = collaborator['login']
        permission = collaborator['permissions']
        role = 'admin' if permission['admin'] else 'write' if permission['push'] else 'read'
        data.append([repo_name, username, role])

# Write to CSV
csv_file = 'repo_access_details.csv'
with open(csv_file, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Repository', 'User or Team', 'Permission'])
    writer.writerows(data)

# Convert CSV to Excel
df = pd.read_csv(csv_file)
df.to_excel('repo_access_details.xlsx', index=False)
" > fetch_repo_access.py
          python fetch_repo_access.py

      - name: Upload Excel file as artifact
        uses: actions/upload-artifact@v2
        with:
          name: repo-access-details
          path: repo_access_details.xlsx
